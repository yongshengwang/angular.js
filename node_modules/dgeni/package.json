{
  "name": "dgeni",
  "version": "0.4.1",
  "description": "Flexible JavaScript documentation generator used by AngularJS",
  "main": "lib/Dgeni.js",
  "scripts": {
    "test": "jasmine-node lib",
    "cover": "istanbul cover jasmine-node -- lib",
    "docs": "bin/gen-docs.js ./docs/dgeni-docs.js"
  },
  "bin": {
    "dgeni": "bin/gen-docs.js"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/angular/dgeni.git"
  },
  "author": {
    "name": "Pete Bacon Darwin"
  },
  "licenses": [
    {
      "type": "Apache",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  ],
  "dependencies": {
    "canonical-path": "~0.0.2",
    "dependency-graph": "~0.1.0",
    "di": "0.0.1",
    "optimist": "~0.6.0",
    "lodash": "^2.4.1",
    "q": "~0.9.7",
    "validate.js": "^0.2.0",
    "winston": "~0.7.2"
  },
  "devDependencies": {
    "dgeni-packages": "^0.10.0",
    "istanbul": "^0.2.7",
    "jasmine-node": "^2.0.0",
    "rewire": "~2.0.0"
  },
  "contributors": [
    {
      "name": "Pete Bacon Darwin",
      "email": "pete@bacondarwin.com"
    },
    {
      "name": "forresst",
      "email": "forresst@voila.fr"
    },
    {
      "name": "Pascal Precht",
      "email": "pascal.precht@googlemail.com"
    },
    {
      "name": "Matias Niemel√§",
      "email": "matias@yearofmoo.com"
    },
    {
      "name": "nate-wilkins",
      "email": "nwilkins2012@gmail.com"
    },
    {
      "name": "Donald Pipowitch",
      "email": "pipo@senaeh.de"
    },
    {
      "name": "thorn0",
      "email": "thorn.mailbox@gmail.com"
    },
    {
      "name": "Jeff Cross",
      "email": "middlefloor@gmail.com"
    },
    {
      "name": "Andres Dominguez",
      "email": "andresdominguez@users.noreply.github.com"
    }
  ],
  "bugs": {
    "url": "https://github.com/angular/dgeni/issues"
  },
  "readme": "# Dgeni - Documentation Generator [![Build Status](https://travis-ci.org/angular/dgeni.svg?branch=master)](https://travis-ci.org/angular/dgeni)\n\n![](assets/dgeni-logo-600x400.png)\n\nThe node.js documentation generation utility by angular.js and other projects.\n\n## Getting started\n\nTry out the Dgeni example project at https://github.com/petebacondarwin/dgeni-example\n\n## Installation\n\nYou'll need node.js and a bunch of npm modules installed to use Dgeni.  Get node.js from here:\nhttp://nodejs.org/.\n\nIn the project you want to document you install Dgeni by running:\n\n```\nnpm install dgeni --save\n```\n\nThis will install Dgeni and any modules that Dgeni depends upon.\n\n\n## Running Dgeni\n\nDgeni on its own doesn't do much.  You much configure it with **Packages** that contain **Services**\nand **Processors**. It is the **Processors** that actually convert your source files to\ndocumentation files.\n\nTo run the processors we create a new instance of `Dgeni`, providing to it an array of **Packages**\nto load.  Then simply call the `generate()` method on this instance.  The `generate()` method runs the\nprocessors asynchronously and returns a **Promise** to the generated documents.\n\n```js\nvar Dgeni = require('dgeni');\n\nvar packages = [require('./myPackage')];\n\nvar dgeni = new Dgeni(packages);\n\ndgeni.generate().then(function(docs) {\n  console.log(docs.length, 'docs generated');\n});\n```\n\n### Running from the Command Line\n\nDgeni is normally used from a build tool such as Gulp or Grunt but it does also come with a\ncommand line tool.\n\nIf you install Dgeni globally then you can run it from anywhere:\n\n```bash\nnpm install -g dgeni\ndgeni some/package.js\n```\n\nIf Dgeni is only installed locally then you either have to specify the path explicitly:\n\n```bash\nnpm install dgeni\nnode_modules/.bin/dgeni some/package.js\n```\n\nor you can run the tool in an npm script:\n\n```js\n{\n  ...\n  scripts: {\n    docs: 'dgeni some/package.js'\n  }\n  ...\n}\n```\n\n\nThe usage is:\n\n\n```bash\ndgeni path/to/mainPackage [path/to/other/packages ...] [--log level]\n```\n\nYou must provide the path to one or more Dgeni Packages to load. You can, optionally, set\nthe logging level.\n\n\n## Packages\n\n**Services**, **Processors**, configuration values and templates are be bundled into a `Package`.  Packages\ncan depend upon other Packages.  In this way you can build up your custom configuration on\ntop of an existing configuration.\n\n### Defining a Package\n\nDgeni provides a `Package` type that you instantiate.  This instance has methods to register **Services** and\n**Processors**, and to configure the properties of **Processors**:\n\n```js\nvar Package = require('dgeni').Package;\nvar myPackage = new Package('myPackage', ['packageDepencency1', 'packageDependency2']);\n\nmyPackage.processor(require('./processors/processor1'));\nmyPackage.processor(require('./processors/processor2'));\n\nmyPackage.factory(require('./services/service1'));\nmyPackage.factory(require('./services/service2'));\n\nmyPackage.config(function(processor1, service2) {\n  service2.someProperty = 'some value';\n  processor1.specialService = service2;\n});\n```\n\n\n## Services\n\nDgeni makes significant use of **Dependency Injection (DI)** to instantiate objects.  Objects that\nwill be instantiated by the DI system must be provided by a **factory function**, which is registered\nin a **Package**, either as a **Processor**, by `myPackage.processor(factoryFn)`, or as a **Service**,\nby `myPackage.factory(factoryFn)`.\n\n### Defining a Service\n\nThe parameters to a factory function are dependencies on other services that the DI system must find\nor instantiate and provide to the factory function.\n\n**car.js**:\n```js\nmodule.exports = function car(function(engine, wheels) {\n  return {\n    drive: function() {\n      engine.start();\n      wheels.turn();\n    }\n  };\n})\n```\n\nHere we have defined a `car` service, which depends upon two other services, `engine` and `wheels`\ndefined elsewhere.  Note that this `car` service doesn't care how and where these dependencies are\ndefined. It relies on the DI system to provide them when needed.\n\nThe `car` service returned by the factory function is an object containing one method, `drive()`,\nwhich in turn calls methods on `engine` and `wheels`.\n\n\n### Registering a Service\n\nYou then register the Service with a Package:\n\n**myPackage.js**:\n```jsv\nvar Package = require('dgeni').Package;\n\nmodule.exports = new Package('myPackage')\n  .factory(require('./car'));\n```\n\nThis car Service is then available to any other Service, Processor or configuration block:\n\n```js\nvar Package = require('dgeni').Package;\n\nmodule.exports = new Package('greenTaxiPackage', ['myPackage'])\n\n  .factory(function taxi(car) {\n    return {\n      orderTaxi: function(place) { car.driveTo(place); }\n    };\n  })\n\n  .config(function(car) {\n    car.fuel = 'hybrid';\n  });\n```\n\n\n## Processors\n\n**Processors** are **Services** that contain a `$process(docs)` method.  The processors are run\none after another in a pipeline. Each Processor takes the collection documents from the previous\nProcessor and manipulates it, maybe inserting new documents or adding meta data to documents that are\nthere already.\n\nProcessors can expose properties that tell Dgeni where in the pipeline they should be run and\nhow to validate the configuration of the Processor.\n\n* `$enabled` - if set to `false` then this Processor will not be included in the pipeline\n* `$runAfter` - an array of strings, where each string is the name of a Processor that must appear\n**earlier** in the pipeline than this Processor\n* `$runBefore` - an array of strings, where each string is the name of a Processor that must appear\n**later** in the pipeline than this one\n* `$validate` - a [http://validatejs.org/](http://validatejs.org/) constraint object that Dgeni uses\nto validate the properties of this Processor.\n\n\n### Defining a Processor\n\nYou define Processors just like you would a Service:\n\n**myDocProcessor.js**:\n```js\nmodule.exports = function myDocProcessor(dependency1, dependency2) {\n  return {\n    $process: function (docs) {\n        //... do stuff with the docs ...\n    },\n    $runAfter: ['otherProcessor1'],\n    $runBefore: ['otherProcessor2', 'otherProcessor3'],\n    $validate: {\n      myProperty: { presence: true }\n    },\n    myProperty: 'some config value'\n  };\n};\n```\n\n\n### Registering a Processor\n\nYou then register the Processor with a Package:\n**myPackage.js**:\n```jsv\nvar Package = require('dgeni').Package;\n\nmodule.exports = new Package('myPackage')\n  .processor(require('./myDocProcessor'));\n```\n\n### Asynchronous Processing\n\nThe `$process(docs)` method can be synchronous or asynchronous:\n\n* If synchronous then it should return `undefined` or a new array of documents.\nIf it returns a new array of docs then this array will replace the previous `docs` array.\n* If asynchronous then it must return a **Promise**, which should resolve to `undefined`\nor a new collection of documents. By returning a **Promise**, the processor tells Dgeni\nthat it is asynchronous and Dgeni will wait for the promise to resolve before calling the\nnext processor.\n\n\nHere is an example of an asynchronous **Processor**\n```js\nvar qfs = require('q-io/fs');\nmodule.exports = function readFileProcessor() {\n  return {\n    filePath: 'some/file.js',\n    $process(docs) {\n      return qfs.readFile(this.filePath).then(function(response) {\n        docs.push(response.data);\n      });\n    }\n  };\n```\n\n### Standard Dgeni Packages\n\nThe [dgeni-packages repository](https://github.com/angular/dgeni-packages) contains a many Processors -\nfrom basic essentials to complex, angular.js specific.  These processors are grouped into Packages:\n\n* `base` -  contains the basic file reading and writing Processors as well as an abstract\nrendering Processor.\n\n* `jsdoc` - depends upon `base` and adds Processors and Services to support parsing and\nextracting jsdoc style tags from comments in code.\n\n* `nunjucks` - provides a [nunjucks](http://mozilla.github.io/nunjucks/) based rendering\nengine.\n\n* `ngdoc` - depends upon `jsdoc` and `nunjucks` and adds additional processing for the\nAngularJS extensions to jsdoc.\n\n* `examples` - depends upon `jsdoc` and provides Processors for extracting examples from jsdoc\ncomments and converting them to files that can be run.\n\n* `dgeni` - support for documenting dgeni Packages.\n\n\n### Pseudo Marker Processors\n\nYou can define processors that don't do anything but act as markers for stages of the\nprocessing.  You can use these markers in `$runBefore` and `$runAfter` properties to ensure\nthat your Processor is run at the right time.\n\nThe **Packages** is dgeni-packages define some of these marker processors. Here is a list\nof these in the order that Dgeni will add them to the processing pipeline:\n\n\n* reading-files *(defined in base)*\n* files-read *(defined in base)*\n* parsing-tags *(defined in jsdoc)*\n* tags-parsed *(defined in jsdoc)*\n* extracting-tags *(defined in jsdoc)*\n* tags-extracted *(defined in jsdoc)*\n* processing-docs *(defined in base)*\n* docs-processed *(defined in base)*\n* adding-extra-docs *(defined in base)*\n* extra-docs-added *(defined in base)*\n* computing-ids *(defined in base)*\n* ids-computed *(defined in base)*\n* computing-paths *(defined in base)*\n* paths-computed *(defined in base)*\n* rendering-docs *(defined in base)*\n* docs-rendered *(defined in base)*\n* writing-files *(defined in base)*\n* files-written *(defined in base)*\n\n\n## Configuration Blocks\n\nYou can configure the **Services** and **Processors** defined in a **Package** or its dependencies\nby registering **Configuration Blocks** with the **Package**.  These are functions that can be\ninjected with **Services** and **Processors** by the DI system, giving you the opportunity to\nset properties on them.\n\n\n### Registering a Configuration Block\n\nYou register a **Configuration Block** by calling `config(configFn)` on a Package.\n\n```js\nmyPackage.config(function(readFilesProcessor) {\n  readFilesProcessor.sourceFiles = ['src/**/*.js'];\n});\n```\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/angular/dgeni#readme",
  "_id": "dgeni@0.4.1",
  "_shasum": "d7f35a5315ff3d61cbace6dc358eaad3f069117a",
  "_resolved": "https://registry.npmjs.org/dgeni/-/dgeni-0.4.1.tgz",
  "_from": "https://registry.npmjs.org/dgeni/-/dgeni-0.4.1.tgz"
}
