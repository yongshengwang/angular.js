{
  "name": "angular-benchpress",
  "version": "0.2.2",
  "description": "A macro benchmark runner for JavaScript Web apps",
  "main": "lib/bp.js",
  "bin": {
    "benchpress": "bin/benchpress"
  },
  "scripts": {
    "test": "karma start"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/angular/benchpress.git"
  },
  "keywords": [
    "angular",
    "benchmark",
    "javascript"
  ],
  "author": {
    "name": "jeffbcross, jbdeboer"
  },
  "license": "Apache 2",
  "bugs": {
    "url": "https://github.com/angular/benchpress/issues"
  },
  "homepage": "https://github.com/angular/benchpress",
  "dependencies": {
    "bootstrap": "^3.2.0",
    "express": "^4.8.6",
    "minimist": "^1.1.0",
    "mkdirp": "^0.5.0",
    "rimraf": "^2.2.8",
    "underscore": "^1.6.0",
    "di": "~2.0.0-pre-9",
    "rx": "~2.3.20",
    "browserify": "~7.0.0"
  },
  "devDependencies": {
    "grunt": "^0.4.5",
    "karma": "^0.12.21",
    "karma-chrome-launcher": "^0.1.4",
    "karma-jasmine": "^0.1.5",
    "jasmine-node": "~1.14.5",
    "rewire": "~2.1.0",
    "karma-cli": "0.0.4",
    "karma-bro": "~0.10.0"
  },
  "readme": "\n# Benchpress\n\nBenchpress allows creation and sampling of macro benchmarks to compare performance of real world\nweb applications. The project is built and maintained by the [Angular](https://github.com/angular)\nteam, and is used to test performance of [AngularJS](https://github.com/angular/angular.js) and [AngularDart](https://github.com/angular/angular.js), but is not limited to testing\nwith these frameworks.\n\n```\n$ npm install -g angular-benchpress\n```\n\n## Status: In-Development\n\nExpect frequent breaking changes.\n\n## Creating Benchmarks\n\nStarting in a project's web app's directory:\n 1. Create a directory called \"benchmarks\" (or some other name if the build step will be provided)\n 1. Create a directory in benchmarks/&lt;benchmark-name&gt;\n 1. In benchmarks/&lt;benchmark-name&gt;, create a [config file](#benchpress-config) called \"bp.conf.js\" to specify scripts to load in this benchmark\n 1. Add a file called \"main.html\" which is the html that will be interpolated into the benchmark\n   runner template. This is where the markup for the app being tested should live.\n    This is required, although it may be empty.\n 1. Create any scripts, html files, or other dependent files in the same folder\n 1. Run `benchpress build` to generate the combined benchmark runner in \"benchpress-build/\" within the web app\n 1. Still in the web app directory, execute `benchpress run`\n 1. Launch Browser (Chrome Canary provides most accurate memory data, See\n    [Launching Canary](#launching-canary) for instructions on testing in Chrome\n    Canary)\n 1. Browse to `localhost:3339`\n\nThe benchpress library adds an array to the global `bp` object called \"steps,\" which is where\na benchmark should push benchmark configuration objects. The object should contain a `name`, which\nis what the benchmark shows up as in the report, and a `fn`, which is the function that gets\nevaluated and timed.\n\n```javascript\nbp.benchmarkSteps.push({\n  name: 'Something Expensive',\n  description: 'Lengthy description of benchmark...',\n  fn: function() {\n    someExpensiveOperation();\n  }\n});\n```\n\nBenchpress also exposes an API to manage variables of a test run, useful for comparing test runs\nunder different code conditions. This API is exposed on `bp.Variables`, and has the following\nmethods and properties:\n\n * bp.Variables.add({value: 'ngBindOnce'});\n * bp.Variables.addMany([{value: 'ngBindOnce'},{value: 'baseline'}]);\n * bp.Variables.select('ngBindOnce'); //Select variable by value\n * bp.Variables.selected; //{value:'ngBindOnce'}\n * bp.Variables.variables; //Array of available variables\n\n\nA variable should be an object with at least a value property, which is a string. Other properties\nmay be added.\n\nHere's how an AngularJS benchmark would incorporate Benchpress variables:\n\n```javascript\n$scope.$watch(function() {return ctrl.benchmarkType}, function(newVal, oldVal) {\n  bp.Variables.select(newVal);\n});\nbp.Variables.add({\n  value: 'none',\n  label: 'none'\n});\n$scope.variableStates = bp.Variables.variables;\nctrl.benchmarkType = bp.Variables.selected? bp.Variables.selected.value : undefined;\n```\n\n```html\n<div ng-repeat=\"state in variableStates\">{{state.label}}: <input type=\"radio\" name=\"variableState\" ng-model=\"ctrl.benchmarkType\" ng-value=\"state.value\"></div>\n```\n\nSee the example in `benchmarks/largetable` for full reference.\n\nVariables are optional, and are a no-op as far as benchpress is concerned. Benchpress relies on\nthe benchmark code to read and manipulate variable state to change the actual execution of the\nsteps under test. Benchpress provides this API since mosts tests implement variables of some sort,\nand Benchpress would have a hard time running tests programmatically with variables without some\nnotion of variables.\n\nThe default variable to be executed can be provided in the search string of the url using the\n\"variable\" parameter name, ie\n`http://localhost:3339/benchpress-build/largetable?variable=ngBindOnce`.\n\nThere is one variable state set for all steps at any given time.\n\n### Preparation and cleanup\n\nThere are no sophisticated mechanisms for preparing or cleaning up after tests (yet). A benchmark should\nadd a step before or after the real test in order to do test setup or cleanup. All steps will show\nup in reports.\n\n## Benchpress Config\n\nEach benchmark directory should contain a file named `bp.conf.js`, which tells benchpress\nhow to prepare the benchmark at build-time.\n\nExample benchpress config:\n\n```javascript\nmodule.exports = function(config) {\n  config.set({\n    //Ordered list of scripts to be appended to head of document\n    scripts: [{\n      id: 'angular', //optional, allows overriding script at runtime by providing ?angular=/some/path,\n      src: '../../../build/angular.js' //relative path to library from runtime benchmark location\n    }]\n  });\n}\n```\n\n## CLI\n\nThe CLI has three commands:\n\n```\n$ benchpress build --build-path=optional/path\n$ benchpress run --build-path=optional/path //Starts serving cwd at :3339. Will redirect '/' to build-path\n$ benchpress launch_chrome //Launches Chrome Canary as described below\n```\n\n## Launching Canary\n\nFor Mac and Linux computers, a utility script is included to launch Chrome Canary with special\nflags to allow manual garbage collection, as well as high resolution memory reporting. Unless\nChrome Canary is used, these features are not available, and reports will be lacking information.\nSamples will also have more outliers with more expensive test runs because garbage collection timing\nis left up to the VM.\n\nThis launches Chrome Canary in Incognito Mode for more accurate testing.\n\n```\n$ benchpress launch_chrome\n```\n\n## Running Benchmarks\n\nAfter opening the benchmark in the browser as described in\n[Creating Benchmarks](#creating-benchmarks), the test execution may be configured in two ways:\n\n 1. Number of samples to collect\n 1. How many test cycles to run\n\nThe number of samples tells benchpress \"analyze the most recent n samples for reporting.\" If the\nnumber of samples is 20, and a user runs a loop 99 times, the last 20 samples are the only\nones that are calculated in the reports. This value is controlled by a text input at the top of the\nscreen, which is set to 20 by default.\n\nThe number of times a test cycle executes is set by pressing the button representing how many\ncycles should be performed. Options are:\n\n * Loop: Keep running until the loop is paused\n * Once: Run one cycle (note that the samples will still be honored, pressing once 100 times will\n   still collect the number of samples specified in the text input)\n * 25x: Run 25 cycles and stop, still honoring the specified number of samples to collect\n",
  "readmeFilename": "README.md",
  "_id": "angular-benchpress@0.2.2",
  "_shasum": "05754d36e6248e061dbaf6a30a801c06217f1f60",
  "_resolved": "https://registry.npmjs.org/angular-benchpress/-/angular-benchpress-0.2.2.tgz",
  "_from": "https://registry.npmjs.org/angular-benchpress/-/angular-benchpress-0.2.2.tgz"
}
